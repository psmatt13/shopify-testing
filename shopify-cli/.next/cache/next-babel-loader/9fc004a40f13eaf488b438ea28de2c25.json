{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matt\\\\scratch\\\\shopify\\\\api_tester\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport App from \"next/app\";\nimport { AppProvider } from \"@shopify/polaris\";\nimport { Provider, useAppBridge } from \"@shopify/app-bridge-react\";\nimport { authenticatedFetch } from \"@shopify/app-bridge-utils\";\nimport { Redirect } from \"@shopify/app-bridge/actions\";\nimport \"@shopify/polaris/dist/styles.css\";\nimport translations from \"@shopify/polaris/locales/en.json\";\n\nfunction userLoggedInFetch(app) {\n  const fetchFunction = authenticatedFetch(app);\n  return async (uri, options) => {\n    const response = await fetchFunction(uri, options);\n\n    if (response.headers.get(\"X-Shopify-API-Request-Failure-Reauthorize\") === \"1\") {\n      const authUrlHeader = response.headers.get(\"X-Shopify-API-Request-Failure-Reauthorize-Url\");\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, authUrlHeader || `/auth`);\n      return null;\n    }\n\n    return response;\n  };\n}\n\nfunction MyProvider(props) {\n  const app = useAppBridge();\n  const client = new ApolloClient({\n    fetch: userLoggedInFetch(app),\n    fetchOptions: {\n      credentials: \"include\"\n    }\n  });\n  const Component = props.Component;\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  })));\n}\n\nclass MyApp extends App {\n  render() {\n    const {\n      Component,\n      pageProps,\n      host\n    } = this.props;\n    return __jsx(AppProvider, {\n      i18n: translations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, __jsx(Provider, {\n      config: {\n        apiKey: API_KEY,\n        host: host,\n        forceRedirect: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, __jsx(MyProvider, _extends({\n      Component: Component\n    }, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nMyApp.getInitialProps = async ({\n  ctx\n}) => {\n  return {\n    host: ctx.query.host\n  };\n};\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Matt/scratch/shopify/api_tester/pages/_app.js"],"names":["ApolloClient","ApolloProvider","App","AppProvider","Provider","useAppBridge","authenticatedFetch","Redirect","translations","userLoggedInFetch","app","fetchFunction","uri","options","response","headers","get","authUrlHeader","redirect","create","dispatch","Action","APP","MyProvider","props","client","fetch","fetchOptions","credentials","Component","MyApp","render","pageProps","host","apiKey","API_KEY","forceRedirect","getInitialProps","ctx","query"],"mappings":";;;;;;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,2BAAvC;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAO,kCAAP;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,QAAMC,aAAa,GAAGL,kBAAkB,CAACI,GAAD,CAAxC;AAEA,SAAO,OAAOE,GAAP,EAAYC,OAAZ,KAAwB;AAC7B,UAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACC,GAAD,EAAMC,OAAN,CAApC;;AAEA,QACEC,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CAAqB,2CAArB,MAAsE,GADxE,EAEE;AACA,YAAMC,aAAa,GAAGH,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,CACpB,+CADoB,CAAtB;AAIA,YAAME,QAAQ,GAAGX,QAAQ,CAACY,MAAT,CAAgBT,GAAhB,CAAjB;AACAQ,MAAAA,QAAQ,CAACE,QAAT,CAAkBb,QAAQ,CAACc,MAAT,CAAgBC,GAAlC,EAAuCL,aAAa,IAAK,OAAzD;AACA,aAAO,IAAP;AACD;;AAED,WAAOH,QAAP;AACD,GAhBD;AAiBD;;AAED,SAASS,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAMd,GAAG,GAAGL,YAAY,EAAxB;AAEA,QAAMoB,MAAM,GAAG,IAAIzB,YAAJ,CAAiB;AAC9B0B,IAAAA,KAAK,EAAEjB,iBAAiB,CAACC,GAAD,CADM;AAE9BiB,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD;AAFgB,GAAjB,CAAf;AAOA,QAAMC,SAAS,GAAGL,KAAK,CAACK,SAAxB;AAEA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;;AAED,MAAMM,KAAN,SAAoB5B,GAApB,CAAwB;AACtB6B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA,SAAF;AAAaG,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAiC,KAAKT,KAA5C;AACA,WACE,MAAC,WAAD;AAAa,MAAA,IAAI,EAAEhB,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AACE,MAAA,MAAM,EAAE;AACN0B,QAAAA,MAAM,EAAEC,OADF;AAENF,QAAAA,IAAI,EAAEA,IAFA;AAGNG,QAAAA,aAAa,EAAE;AAHT,OADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,MAAC,UAAD;AAAY,MAAA,SAAS,EAAEP;AAAvB,OAAsCG,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAPF,CADF,CADF;AAaD;;AAhBqB;;AAmBxBF,KAAK,CAACO,eAAN,GAAwB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmB;AACzC,SAAO;AACLL,IAAAA,IAAI,EAAEK,GAAG,CAACC,KAAJ,CAAUN;AADX,GAAP;AAGD,CAJD;;AAMA,eAAeH,KAAf","sourcesContent":["import ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport App from \"next/app\";\r\nimport { AppProvider } from \"@shopify/polaris\";\r\nimport { Provider, useAppBridge } from \"@shopify/app-bridge-react\";\r\nimport { authenticatedFetch } from \"@shopify/app-bridge-utils\";\r\nimport { Redirect } from \"@shopify/app-bridge/actions\";\r\nimport \"@shopify/polaris/dist/styles.css\";\r\nimport translations from \"@shopify/polaris/locales/en.json\";\r\n\r\nfunction userLoggedInFetch(app) {\r\n  const fetchFunction = authenticatedFetch(app);\r\n\r\n  return async (uri, options) => {\r\n    const response = await fetchFunction(uri, options);\r\n\r\n    if (\r\n      response.headers.get(\"X-Shopify-API-Request-Failure-Reauthorize\") === \"1\"\r\n    ) {\r\n      const authUrlHeader = response.headers.get(\r\n        \"X-Shopify-API-Request-Failure-Reauthorize-Url\"\r\n      );\r\n\r\n      const redirect = Redirect.create(app);\r\n      redirect.dispatch(Redirect.Action.APP, authUrlHeader || `/auth`);\r\n      return null;\r\n    }\r\n\r\n    return response;\r\n  };\r\n}\r\n\r\nfunction MyProvider(props) {\r\n  const app = useAppBridge();\r\n\r\n  const client = new ApolloClient({\r\n    fetch: userLoggedInFetch(app),\r\n    fetchOptions: {\r\n      credentials: \"include\",\r\n    },\r\n  });\r\n\r\n  const Component = props.Component;\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Component {...props} />\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nclass MyApp extends App {\r\n  render() {\r\n    const { Component, pageProps, host } = this.props;\r\n    return (\r\n      <AppProvider i18n={translations}>\r\n        <Provider\r\n          config={{\r\n            apiKey: API_KEY,\r\n            host: host,\r\n            forceRedirect: true,\r\n          }}\r\n        >\r\n          <MyProvider Component={Component} {...pageProps} />\r\n        </Provider>\r\n      </AppProvider>\r\n    );\r\n  }\r\n}\r\n\r\nMyApp.getInitialProps = async ({ ctx }) => {\r\n  return {\r\n    host: ctx.query.host,\r\n  };\r\n};\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}